一、数组排序(Arrays.sort)
　　当遇到数组排序时，我们经常会使用学过的几种排序方法，而java本身提供了Arrays.sort,在数据元素较少或者对效率要求不是抬高时，直接使用Arrays.sort来的更容易。查看一下源码Arrays.sort 本身采用的是快速排序。
　　1. 数字排序 int[] intArray = new int[] { 4, 1, 3, -23 };
　　Arrays.sort(intArray);
　　输出： [-23, 1, 3, 4]
　　2. 字符串排序，先大写后小写 String[] strArray = new String[] { "z", "a", "C" };
　　Arrays.sort(strArray);
　　输出： [C, a, z]
　　3. 严格按字母表顺序排序，也就是忽略大小写排序 Case-insensitive sort
　　Arrays.sort(strArray, String.CASE_INSENSITIVE_ORDER);
　　输出： [a, C, z]
　　4. 反向排序， Reverse-order sort
　　Arrays.sort(strArray, Collections.reverseOrder());
　　输出：[z, a, C]
　　5. 忽略大小写反向排序 Case-insensitive reverse-order sort
　　Arrays.sort(strArray, String.CASE_INSENSITIVE_ORDER);
　　Collections.reverse(Arrays.asList(strArray));
　　输出： [z, C, a]
　　6、对象数组排序
　　要对一个对象数组排序 ，则要自己实现java.util.Comparator接口
　　例子：
　　Common_User[] userListTemp=new Common_User[temp.size()];
　　Arrays.sort(userListTemp, new PinyinComparator());
　　PinyinComparator 实现了Comparator接口，重写了compare方法，来告诉Arrays按照什么规则来比较两个对象的大小。具体Comparator的例子请看下边。

二、集合排序(Collections.sort )
　　如果要对一个集合的排序，则要自己实现java.util.Comparator接口。
　　List temp= (List)ar.list ;
　　Collections.sort(temp, new Comparator(){
　　	public int compare(WBMessage arg0, WBMessage arg1) {
　　	//升序:arg0.compareTo(arg1) 若 arg0小于arg1 就是返回负值
　　	//降序:arg1.compareTo(arg0)
　　	String b=arg1.getTime();
　　	String a=arg0.getTime();
　　	return b.compareTo(a);
　　	}
　　});